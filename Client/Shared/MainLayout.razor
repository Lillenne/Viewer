@inherits LayoutComponentBase
@inject IAuthClient Auth
@inject NavigationManager Nav
@inject IImageClient Client

<MudThemeProvider IsDarkMode="true"/>
<MudDialogProvider
    Position="DialogPosition.Center"
    CloseButton="true"
    MaxWidth="MaxWidth.ExtraLarge"
    CloseOnEscapeKey="true"
    />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Home"
                       Color="Color.Inherit"
                       @onclick="@ToHome"/>
        <MudIconButton Icon="@Icons.Material.Filled.Login"
                       Color="Color.Inherit"
                       @onclick="@ToLogin"/>
        <MudIconButton Icon="@Icons.Material.Filled.AppRegistration"
                       Color="Color.Inherit"
                       @onclick="@ToRegistration"/>
        <MudIconButton Icon="@Icons.Material.Filled.UploadFile"
                       Color="Color.Inherit"
                       @onclick="@ToUpload"/>
        <MudSpacer/>
        <MudText Typo="Typo.h6">Family photos</MudText>
        <MudSpacer/>
        <MudIconButton Icon="@Icons.Material.Filled.Logout"
                       Color="Color.Inherit"
                       @onclick="@Auth.SignOut" />
        <MudIconButton Icon="@Icons.Material.Filled.ShoppingCart"
                       Color="Color.Inherit"
                       @onclick="@ToggleCart"/>
    </MudAppBar>
    

@* Cart drawer *@
<MudDrawer @bind-Open="@_cartOpen" Anchor="Anchor.Right" ClipMode="DrawerClipMode.Docked" Variant="DrawerVariant.Persistent" Width="35em">
    <CartView DownloadCallback="Download" />
</MudDrawer>
    
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _cartOpen = true;

    private void ToggleCart() => _cartOpen = !_cartOpen;
    private void ToHome() => Nav.NavigateTo(Routes.Home);
    private void ToLogin() => Nav.NavigateTo(Routes.Login);
    private void ToRegistration() => Nav.NavigateTo(Routes.Register);
    private void ToUpload() => Nav.NavigateTo(Routes.Upload);
    
    private async Task? Download(Cart arg)
    {
        var req = new DownloadImagesRequest()
        {
            Images = arg.Images.Select(i => new GetImageRequest { Width = -1, Height = -1, Id = i.Id })
        };
        await Client.Download(req);
    }
}
