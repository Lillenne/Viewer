@using Viewer.Shared
@inject Cart Cart;
@inject IDialogService DialogService;

<div class="d-inline-flex flex-wrap gap-4 m-4">
    @if (Images is null)
    {
        <MudProgressCircular Indeterminate="true"/>
    }
    else
    {
        <MudSlider @bind-Value="@Width" Variant="Variant.Filled" Min="20" Max="1024">
            Adjust image size with the slider
        </MudSlider>
        @foreach (var img in Images)
        {
            <div class="bouncer container hidden-child-button" style="width: max-content; height: max-content;">
                <MudImage Src="@img.Url"
                          Class="rounded-lg"
                          Style="@(GetStyle(img))"
                          ObjectPosition="ObjectPosition.Center"
                          ObjectFit="ObjectFit.Cover"
                          Width="@Width"
                          loading="lazy"
                          draggable="false"
                          Fluid="true"
                          @onclick="@(args => OnClick(img, args))"/>
                <MudIconButton Style="z-index: 1; position: absolute; right: 5%; bottom: 5%;"
                               Size="Size.Large"
                               Color="Color.Default"
                               Variant="Variant.Text"
                               Class="hover-button"
                               Icon="@(GetIcon(img))"
                               OnClick="@(() => AddToOrRemoveFromCart(img))"/>
                <img src="check-mark.png" width="@GetCheckWidth(img)" alt="check mark" 
                     loading="lazy" style="@GetCheckMarkStyle(img)"/>
            </div>
        }
    }
</div>

@code {
    [Parameter] public IEnumerable<ImageId>? Images { get; set; }

    [Parameter]
    public int Width { get; set; } = 300;

    protected override void OnInitialized()
    {
        Cart.Images.CollectionChanged += (_, _) => StateHasChanged();
    }

    private void OnClick(ImageId img, MouseEventArgs args)
    {
        if (args.CtrlKey)
        {
            AddToOrRemoveFromCart(img);
        }
        else
        {
            CreatePopUp(img);
        }
    }

    private string GetStyle(ImageId img) => Cart.Images.Contains(img) ? "filter: grayscale(30%);" : string.Empty;

    private void CreatePopUp(ImageId img)
    {
        var opts = new DialogOptions() { CloseOnEscapeKey = true };
        var parameters = new DialogParameters();
        parameters.Add("Source", img);
        DialogService.Show<ImagePopUp>(img.Name, parameters, opts);
    }

    private void AddToOrRemoveFromCart(ImageId? img) => Cart.AddOrRemove(img);

    private string GetIcon(ImageId img) => 
        Cart.Images.Contains(img) ? Icons.Material.Filled.HorizontalRule : Icons.Material.Filled.Add;

    private string? GetCheckMarkStyle(ImageId img)
    {
        var vis = Cart.Images.Contains(img) ? "visible" : "hidden";
        return $"z-index: 1; position: absolute; right: 10%; top: 5%; visibility: {vis}";
    }

    private int GetCheckWidth(ImageId img) => int.CreateSaturating(Width * 0.1);
}