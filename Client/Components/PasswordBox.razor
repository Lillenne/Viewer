<MudTextField InputType="@_passwordInput" Label="Password" HelperText="Enter your password..." @bind-Value="@Value" For="@For" 
              Variant="Variant.Text" Placeholder="@_placeHolder"
              Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="@ButtonTestClick" AdornmentAriaLabel="Show Password"/>

@code {
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    public EventCallback<Expression<Func<string?>>> ForChanged { get; set; }

    [Parameter]
    public Expression<Func<string?>>? For
    {
        get => _for;
        set
        {
            if (value?.Equals(_for) ?? true)
                return;
            _for = value;
            if (ForChanged.HasDelegate)
                ForChanged.InvokeAsync(value);
        }
    }
    
    private Expression<Func<string?>>? _for;

    [Parameter]
    public string? Value
    {
        get => _value;
        set
        {
            if (value?.Equals(_value, StringComparison.Ordinal) ?? true)
                return;
            _value = value;
            if (ValueChanged.HasDelegate)
                ValueChanged.InvokeAsync(value);
        }
    }

    private string? _value;
    
    
    private bool _isShow;
    private InputType _passwordInput = InputType.Password;
    private string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
    private string _placeHolder = _phPw;
    private const string _phText = "password123";
    private const string _phPw = "********";

    void ButtonTestClick()
    {
        @if (_isShow)
        {
            _isShow = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
            _placeHolder = _phPw;
        }
        else {
            _isShow = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
            _placeHolder = _phText;
        }
    }
}