@page "/"
@using Viewer.Shared
@using Viewer.Shared.Requests
@using Viewer.Client.ServiceClients
@using System.Security.Claims
@inject IImageClient ImageClient
@inject Cart Cart;
@inject ImagePopUpProvider iis;

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudText Typo="Typo.h6" Class="m-4" Style="font-size: 2.5rem" Color="Color.Default">Hello, @GetName().Result</MudText>
    </Authorized>
    <NotAuthorized>
        <MudPaper Class="m-4 border-solid border-2 d-inline-block">
            <MudText Class="p-2" Typo="Typo.body1">
                To see more than just sample images, please
                <MudLink Class="d-inline-block" Href="@Routes.Login">
                    <MudText Class="d-inline-block" Typo="Typo.body1">
                        login
                    </MudText>
                </MudLink>.
            </MudText>
        </MudPaper>
    </NotAuthorized>
</AuthorizeView>

<MudDrawer @bind-Open="@FolderOpen" Anchor="Anchor.Left" ClipMode="DrawerClipMode.Always" Width="35em">
    <MudContainer MaxWidth="MaxWidth.False" Class="d-flex flex-column mx-2">
        <FolderOpenButton @bind-Open="@FolderOpen" />
        <MudText Align="Align.Center" Typo="Typo.h6">Notes:</MudText>
        <MudList>
            <MudListItem Text="Click for a preview" Icon="@Icons.Material.Filled.Circle" IconSize="Size.Small"/>
            <MudListItem Text="Ctrl + click to bookmark" Icon="@Icons.Material.Filled.Circle" IconSize="Size.Small"/>
            <MudListItem Text="Use the folder view to navigate" Icon="@Icons.Material.Filled.Circle" IconSize="Size.Small"/>
        </MudList>
        <MudTreeView T="DirectoryTreeItem" Hover="true" Items="_directories" @bind-SelectedValue="@_selectedDirectory" @bind-SelectedValue:after="@OnChangeDir">
            <ItemTemplate Context="item">
                <MudTreeViewItem T="DirectoryTreeItem"
                                 CanExpand="@ItemHasChildren(item)"
                                 Icon="@Icons.Material.Filled.Folder"
                                 Items="@item.Subdirectories.ToHashSet()"
                                 Text="@item.GetShortName()"
                                 Value="@item">
                </MudTreeViewItem>
            </ItemTemplate>
        </MudTreeView>
    </MudContainer>
</MudDrawer>
<FolderOpenButton @bind-Open="@FolderOpen" />
<div class="d-inline-flex flex-wrap gap-4 m-4" style="width: 100%;">
    @if (_images is null)
    {
        /* TODO error text variable, align progress bar center*/
        <MudContainer class="d-flex flex-column flex-wrap" MaxWidth="MaxWidth.False" Style="align-content: center">
            <MudText style="display: block;" Align="Align.Center">Are you sure there is anything here? If so, we are trying to find it. Hold tight...</MudText>
            <MudProgressCircular Style="width: 150px; height: 150px; display: block; margin: 3em auto;" Indeterminate="true"/>
        </MudContainer>
    }
    else if (_selectedDirectory is null || _selectedDirectory.FileCount == 0)
    {
        <MudText Align="Align.Center" Typo="Typo.h6">There is nothing here!</MudText>
    }
    else
    { 
        <MudSlider @bind-Value="@Width" Variant="Variant.Filled" Min="20" Max="1024">
            Adjust image size with the slider
        </MudSlider>
        @foreach (var img in _images)
        {
            <ImagePreview Image="@img" Cart="@Cart" PopUpProvider="@iis" @bind-Width="@Width"/>
        }
    }
</div>


@code {
    [CascadingParameter] public Task<AuthenticationState>? AuthState { get; set; }

    private System.Collections.Generic.HashSet<DirectoryTreeItem>? _directories;
    
    private DirectoryTreeItem? _selectedDirectory;
    
    private bool FolderOpen 
    { 
        get => _folderOpen; 
        set
        {
            _folderOpen = value;
            StateHasChanged();
        }
    } 
    private bool _folderOpen = true;
    
    private IReadOnlyList<ImageId> _images;
    
    [Parameter]
    public int Width { get; set; } = 256;

    [Parameter] 
    public EventCallback<int>? WidthChanged { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Cart.Images.CollectionChanged += (_, _) => StateHasChanged();
        _directories = (await ImageClient.GetDirectories()).ToHashSet();
        _selectedDirectory = _directories?.FirstOrDefault();
        await OnChangeDir();
    }
    
    private async Task OnChangeDir() 
    {
        var req = new GetImagesRequest()
        {
            Directory = _selectedDirectory?.DirectoryName,
            Width = Width,
        };
        _images = await ImageClient.GetImages(req);
    } 
    
    private async Task<string?> GetName() => AuthState is null ? null
        : (await AuthState).User.Claims
            .FirstOrDefault(n => n.Type.Equals("name", StringComparison.InvariantCultureIgnoreCase))?.Value;

    private static bool ItemHasChildren(DirectoryTreeItem item) => item.Subdirectories.Count > 0;
}
