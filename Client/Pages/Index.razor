@page "/"
@using Viewer.Shared
@using Viewer.Shared.Requests
@using Viewer.Client.ServiceClients
@using System.Security.Claims
@inject IImageClient ImageClient

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudText Typo="Typo.h6" Class="m-4" Style="font-size: 2.5rem" Color="Color.Default">Hello, @GetName().Result</MudText>
    </Authorized>
    <NotAuthorized>
        <MudPaper Class="m-4 border-solid border-2 d-inline-block">
            <MudText Class="p-2" Typo="Typo.body1">
                To see more than just sample images, please
                <MudLink Class="d-inline-block" Href="@Routes.Login">
                    <MudText Class="d-inline-block" Typo="Typo.body1">
                        login
                    </MudText>
                </MudLink>.
            </MudText>
        </MudPaper>
    </NotAuthorized>
</AuthorizeView>

@if (_images is null)
{
    /* TODO error text variable, align progress bar center*/
    <MudContainer MaxWidth="MaxWidth.False" Style="align-content: center">
        <MudText Align="Align.Center">Are you sure there is anything here? If so, we are trying to find it. Hold tight...</MudText>
        <MudProgressCircular Indeterminate="true"/>
    </MudContainer>
}
else
{
    <MudGrid Justify="Justify.FlexStart">
        <MudItem xs="3" sm="2" Class="mt-4" Style="display: inline;">
            <MudContainer MaxWidth="MaxWidth.False" Class="d-flex flex-column">
                <MudText Align="Align.Center" Typo="Typo.h6">Notes:</MudText>
                <MudList>
                    <MudListItem Text="Click for a preview" Icon="@Icons.Material.Filled.Circle" IconSize="Size.Small"/>
                    <MudListItem Text="Ctrl + click to bookmark" Icon="@Icons.Material.Filled.Circle" IconSize="Size.Small"/>
                    <MudListItem Text="Use the folder view to navigate" Icon="@Icons.Material.Filled.Circle" IconSize="Size.Small"/>
                </MudList>
                <MudTreeView T="DirectoryTreeItem" Hover="true" Items="_directories" ServerData="@LoadServerData" @bind-SelectedValue="@SelectedDirectory">
                    <ItemTemplate Context="item">
                        <MudTreeViewItem T="DirectoryTreeItem"
                                         CanExpand="@ItemHasChildren(item)"
                                         Icon="@Icons.Material.Filled.Folder"
                                         Text="@item.DirectoryName"
                                         Value="@item">
                        </MudTreeViewItem>
                    </ItemTemplate>
                </MudTreeView>
            </MudContainer>
        </MudItem>
        <MudItem xs="9" sm="10" Style="display: inline-block">
            <Gallery Images="@_images"/>
        </MudItem>
    </MudGrid>
}


@code {
    private async Task<string?> GetName() => AuthState is null ? null 
        : (await AuthState).User.Claims
            .FirstOrDefault(n => n.Type.Equals("name", StringComparison.InvariantCultureIgnoreCase))?.Value;
    private IReadOnlyList<ImageId>? _images;
    private System.Collections.Generic.HashSet<DirectoryTreeItem>? _directories;
    private DirectoryTreeItem? _selectedDir;

    private DirectoryTreeItem? SelectedDirectory
    {
        get => _selectedDir;
        set
        {
            _selectedDir = value;
            ChangeFolder(value);
        }
    }
    [CascadingParameter] public Task<AuthenticationState>? AuthState { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var dirs = (await ImageClient.GetSubDirectories());
        dirs.IfSucc(f =>
        {
            _directories = f.ToHashSet();
            SelectedDirectory = f.First();
        });
        var imgs = await ImageClient.GetImages(new GetImagesRequest() { Directory = SelectedDirectory?.DirectoryName });
        imgs.IfSucc(im => _images = im);
    /*
        // TODO auth-state related logic 
        if (AuthState is not null)
        {
            var state = await AuthState;
            if (state.User.Identity?.Name.Equals(GuestCredentials.Username, StringComparison.OrdinalIgnoreCase) ?? true)
            {
                // TODO get sample images
            }
        }
        else
        {
            var tf = Client.GetFromJsonAsync<IReadOnlyList<DirectoryTreeItem>>("api/ImageAccess/dirs");
            _directories = (await tf.ConfigureAwait(false))?.ToHashSet();
            var r = await tr.ConfigureAwait(false);
            var resp = await r.Content.ReadFromJsonAsync<GetImagesResponse>();
            _images = resp?.Images;
        }
    */
    }

    private async Task ChangeFolder(DirectoryTreeItem? value)
    {
        if (value is null)
        {
            _images = Array.Empty<ImageId>();
            return;
        }
        var imgs = await ImageClient.GetImages(new GetImagesRequest() { Directory = value.DirectoryName });
        _images = imgs.Match<IReadOnlyList<ImageId>>(i => i, Array.Empty<ImageId>, e =>
        {
    // TODO show popup error?
            return Array.Empty<ImageId>();
        });
    }

    private async Task<System.Collections.Generic.HashSet<DirectoryTreeItem>> LoadServerData(DirectoryTreeItem? arg)
    {
        var dirs = (await ImageClient.GetSubDirectories(arg?.DirectoryName));
        return dirs.Match(
            some => some.ToHashSet(),
            () => new(),
            DoDirErr);
    }

    private System.Collections.Generic.HashSet<DirectoryTreeItem> DoDirErr(Exception arg)
    {
        // TODO show popup
        return new();
    }

    private static bool ItemHasChildren(DirectoryTreeItem? value) => value?.HasSubDirectories ?? false;
}