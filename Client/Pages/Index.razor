@page "/"
@using Viewer.Shared
@using Viewer.Shared.Requests
@using Viewer.Client.ServiceClients
@using System.Security.Claims
@inject IImageClient ImageClient
@inject Cart Cart;
@inject ImagePopUpProvider iis;

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudText Typo="Typo.h6" Class="m-4" Style="font-size: 2.5rem" Color="Color.Default">Hello, @GetName().Result</MudText>
    </Authorized>
    <NotAuthorized>
        <MudPaper Class="m-4 border-solid border-2 d-inline-block">
            <MudText Class="p-2" Typo="Typo.body1">
                To see more than just sample images, please
                <MudLink Class="d-inline-block" Href="@Routes.Login">
                    <MudText Class="d-inline-block" Typo="Typo.body1">
                        login
                    </MudText>
                </MudLink>.
            </MudText>
        </MudPaper>
    </NotAuthorized>
</AuthorizeView>

<MudGrid Justify="Justify.FlexStart">
    <MudItem xs="0" sm="2" Class="mt-4" Style="display: inline;">
        <MudContainer MaxWidth="MaxWidth.False" Class="d-flex flex-column">
            <MudText Align="Align.Center" Typo="Typo.h6">Notes:</MudText>
            <MudList>
                <MudListItem Text="Click for a preview" Icon="@Icons.Material.Filled.Circle" IconSize="Size.Small"/>
                <MudListItem Text="Ctrl + click to bookmark" Icon="@Icons.Material.Filled.Circle" IconSize="Size.Small"/>
                <MudListItem Text="Use the folder view to navigate" Icon="@Icons.Material.Filled.Circle" IconSize="Size.Small"/>
            </MudList>
            <MudTreeView T="DirectoryTreeItem" Hover="true" Items="_directories" @bind-SelectedValue="@_selectedDirectory" @bind-SelectedValue:after="@OnChangeDir">
                <ItemTemplate Context="item">
                    <MudTreeViewItem T="DirectoryTreeItem"
                                     CanExpand="@ItemHasChildren(item)"
                                     Icon="@Icons.Material.Filled.Folder"
                                     Items="@item.Subdirectories.ToHashSet()"
                                     Text="@item.GetShortName()"
                                     Value="@item">
                    </MudTreeViewItem>
                </ItemTemplate>
            </MudTreeView>
        </MudContainer>
    </MudItem>
    <MudItem xs="12" sm="10" Style="display: inline-block">
        <div class="d-inline-flex flex-wrap gap-4 m-4" style="width: 100%;">
            @if (_images is null)
            {
                /* TODO error text variable, align progress bar center*/
                <MudContainer MaxWidth="MaxWidth.False" Style="align-content: center">
                    <MudText style="display: block;" Align="Align.Center">Are you sure there is anything here? If so, we are trying to find it. Hold tight...</MudText>
                    <MudProgressCircular style="display: block;" Indeterminate="true"/>
                </MudContainer>
            }
            else if (_selectedDirectory is null || _selectedDirectory.FileCount == 0)
            {
                <MudText Align="Align.Center" Typo="Typo.h6">There is nothing here!</MudText>
            }
            else
            { 
                <MudSlider @bind-Value="@Width" Variant="Variant.Filled" Min="20" Max="1024">
                    Adjust image size with the slider
                </MudSlider>
                @foreach (var img in _images)
                {
                    <ImagePreview Image="@img" Cart="@Cart" PopUpProvider="@iis" @bind-Width="@Width"/>
                }
            }
        </div>
    </MudItem>
</MudGrid>


@code {
    [CascadingParameter] public Task<AuthenticationState>? AuthState { get; set; }

    private System.Collections.Generic.HashSet<DirectoryTreeItem>? _directories;
    
    private DirectoryTreeItem? _selectedDirectory;

    private Virtualize<ImageId>? _virt;
    
    private IReadOnlyList<ImageId> _images;
    
    [Parameter]
    public int Width { get; set; } = 256;

    [Parameter] 
    public EventCallback<int>? WidthChanged { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        Cart.Images.CollectionChanged += (_, _) => StateHasChanged();
        _directories = (await ImageClient.GetDirectories()).ToHashSet();
        _selectedDirectory = _directories?.FirstOrDefault();
        await OnChangeDir();
    }
    
    private async Task OnChangeDir() 
    {
        var req = new GetImagesRequest()
        {
            //Directory = string.IsNullOrEmpty(_selectedDirectory?.DirectoryName) ? "/" : _selectedDirectory?.DirectoryName,
            Directory = _selectedDirectory?.DirectoryName,
            Width = Width,
        };
        _images = await ImageClient.GetImages(req);
        //await _virt!.RefreshDataAsync();
    } 
    
    //private ValueTask<ItemsProviderResult<IEnumerable<ImageId>>> GetImages(ItemsProviderRequest request)
    //{
        //var count = _images is null ? 0 : _selectedDirectory.FileCount / perRow;
        //var imgs = _images?.Skip(request.StartIndex).Take(request.Count) ?? Enumerable.Empty<ImageId>();
        //return new ValueTask<ItemsProviderResult<ImageId>>(new ItemsProviderResult<ImageId>(imgs, count));
    //}

    private async Task<string?> GetName() => AuthState is null ? null
        : (await AuthState).User.Claims
            .FirstOrDefault(n => n.Type.Equals("name", StringComparison.InvariantCultureIgnoreCase))?.Value;

    private static bool ItemHasChildren(DirectoryTreeItem item) => item.Subdirectories.Count > 0;
    
}
